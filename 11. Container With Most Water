Description:
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

思路：
数组的最大水桶容量问题。要点：
1. 从最宽的两边开始往中间找,i,j分别向着中间跳，找到更大的就更新water。
2. 如何减少搜索空间？当i的左边（j的右边）比h=min（height[i],height[j]）还要小的时候，water的结果必然会比之前的少，所以可以直接向对面跳过，找到大于h
的值才有可能找到一个更大的结果。

code：
class Solution {
public:
    int maxArea(vector<int>& height) 
    {
        if(height.empty())
        {
            return 0;
        }
        int left = 0;
        int right = height.size() - 1;
        int water = 0;
        while(left < right)
        {
            int left_h = height[left];
            int right_h = height[right];
            int h = min(left_h, right_h);
            water = max(h * (right - left), water);
            while(height[left] <= h && left < right)
            {
                left++;
            }
            while(height[right] <= h && left < right)
            {
                right--;
            }
        }
        return water;
    }
};
