描述：
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

代码：
/*
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};
*/

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        ListNode Head(0), *p = &Head;
        int add = 0;
        while(l1 || l2 || add)
        {
            int sum = (l1 ? l1->val : 0) + (l2? l2->val : 0) + add;
            if(sum >= 10)
            {
                sum -= 10;
                add = 1;
            }else
            {
                add = 0;
            }
            p->next = new ListNode(sum);
            p = p->next;
            l1 = l1 ? l1 ->next : l1;
            l2 = l2 ? l2 ->next :l2;
        }
        return Head.next;
    }
};
